# --- START OF FILE bot.py ---

import logging
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from marzban_backend import MarzbanBackend  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –∫–ª–∞—Å—Å
import time
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.critical("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env
OPERATORS = os.getenv("OPERATORS", "").split(",")
OPERATORS = [op.strip() for op in OPERATORS if op.strip()]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–æ–±–µ–ª—ã
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏–∑ .env: {OPERATORS}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MarzbanBackend
try:
    marzban = MarzbanBackend()
    logger.info("MarzbanBackend —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MarzbanBackend: {e}", exc_info=True)
    exit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MarzbanBackend: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
def is_operator(username: str) -> bool:
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ DEBUG —É—Ä–æ–≤–µ–Ω—å –≤–∫–ª—é—á–µ–Ω, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    # logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {OPERATORS}")
    return username in OPERATORS

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é start —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üì± –ú–æ–π VPN", callback_data="menu_get_user")],
        [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="menu_get_trial")],
    ]

    if not update.effective_user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ effective_user.")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
        return

    current_user = update.effective_user.username
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_user or update.effective_user.id}")

    if current_user and is_operator(current_user):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user} —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
        keyboard.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="restart_server")])
    # else:
        # logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user} –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")

    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN.\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä - /get_user –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ\n'
        '–ü–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∞ 200—Ä/–º–µ—Å\n\n'
        'üõú –ö—É–ø–∏—Ç—å –†–æ—É—Ç–µ—Ä –∏ –∑–∞–±—ã—Ç—å –ø—Ä–æ VPN:\n'
        'https://ozon.ru/product/2288765942\n\n'
        'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–ø–ª–∞—Ç–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∞: @AP1int',
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /get_user
async def get_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user or not update.effective_user.username:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /get_user.")
        await update.message.reply_text(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    username_tg = update.effective_user.username
    marzban_username = f"{username_tg}vpn"
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /get_user –æ—Ç '{username_tg}', –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban '{marzban_username}'")

    try:
        # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º ---
        logger.info(f"–í—ã–∑–æ–≤ marzban.get_user –¥–ª—è '{marzban_username}'")
        response = marzban.get_user(marzban_username)
        # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–∑–æ–≤–∞ ---
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç marzban.get_user –¥–ª—è '{marzban_username}': type={type(response)}, is_dict={isinstance(response, dict)}")
        if isinstance(response, dict):
             logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (dict keys): {response.keys()}")
        elif response is not None:
             logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {response}")


        if response and isinstance(response, dict): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
            status = response.get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            expire = response.get("expire", 0)
            expire_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(expire)) if expire else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            current_time = time.time()

            info_text = f"‚ÑπÔ∏è –í–∞—à VPN –∞–∫–∫–∞—É–Ω—Ç:\n"
            info_text += f"üë§ –õ–æ–≥–∏–Ω: `{marzban_username}`\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
            info_text += f"üö¶ –°—Ç–∞—Ç—É—Å: {status}\n"
            info_text += f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {expire_str}\n\n"

            if 'subscription_links' in response and response['subscription_links']:
                links = response['subscription_links']
                info_text += "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n"
                if links.get('subuser_url'):
                    info_text += f"‚ñ∂Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É (–¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π):\n`{links['subuser_url']}`\n\n"
                if links.get('v2rayng'):
                    
                    info_text += f"üì± Android (V2rayNG):\n{links['v2rayng']}\n\n"
                if links.get('streisand'):
                    info_text += f"üì± iOS (Streisand):\n{links['streisand']}\n\n"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
                payment_url = links.get('payment_url')
                # –£—Å–ª–æ–≤–∏–µ: (–∏—Å—Ç–µ–∫ –ò–õ–ò –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 5 –¥–Ω–µ–π) –ò –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
                if payment_url and expire < (current_time + 5 * 86400):
                    keyboard = [
                        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_confirmed_{username_tg}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    if expire < current_time:
                        info_text += "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n"
                    else:
                         info_text += "‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç!\n"
                    info_text += "–ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª' –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n"
                    await update.message.reply_text(info_text, reply_markup=reply_markup, parse_mode='Markdown')
                else:
                    await update.message.reply_text(info_text, parse_mode='Markdown')
            else:
                 logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 'subscription_links' –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{marzban_username}'")
                 await update.message.reply_text(info_text, parse_mode='Markdown') # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Å—Å—ã–ª–æ–∫

        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ò–õ–ò Marzban –≤–µ—Ä–Ω—É–ª —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ (None –∏–ª–∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å)
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Marzban '{marzban_username}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç—Ä–∏–∞–ª
            await request_trial(update, context) # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ –ø–æ–∫–∞–∂–µ—Ç –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç

    except Exception as e:
        # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ ---
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /get_user –¥–ª—è Marzban user '{marzban_username}': {e}", exc_info=True)
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )

# –ö–æ–º–∞–Ω–¥–∞ /disable_user (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É!)
async def disable_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # --- –ü–†–û–í–ï–†–ö–ê –û–ü–ï–†–ê–¢–û–†–ê ---
    if not update.effective_user or not update.effective_user.username or not is_operator(update.effective_user.username):
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /disable_user –æ—Ç {update.effective_user.username or update.effective_user.id}")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---

    try:
        target_username = context.args[0] # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban (–Ω–∞–ø—Ä–∏–º–µ—Ä, user1vpn)
        logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {update.effective_user.username} –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username}")
        response = marzban.disable_user(target_username)
        if response:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.")
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_username}` –æ—Ç–∫–ª—é—á–µ–Ω.")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} (–æ—Ç–≤–µ—Ç –æ—Ç Marzban: {response})")
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{target_username}`. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/disable_user <marzban_username>`")
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /disable_user: {e}", exc_info=True)
         await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")

# –ö–æ–º–∞–Ω–¥–∞ /enable_user (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É!)
async def enable_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # --- –ü–†–û–í–ï–†–ö–ê –û–ü–ï–†–ê–¢–û–†–ê ---
    if not update.effective_user or not update.effective_user.username or not is_operator(update.effective_user.username):
        logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ /enable_user –æ—Ç {update.effective_user.username or update.effective_user.id}")
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò ---
    try:
        target_username = context.args[0] # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban
        logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {update.effective_user.username} –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username}")
        response = marzban.enable_user(target_username)
        if response:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_username} —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω.")
            await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{target_username}` –≤–∫–ª—é—á–µ–Ω.")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_username} (–æ—Ç–≤–µ—Ç –æ—Ç Marzban: {response})")
            await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è `{target_username}`. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/enable_user <marzban_username>`")
    except Exception as e:
         logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ /enable_user: {e}", exc_info=True)
         await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ /get_user –∏–ª–∏ –∫–Ω–æ–ø–∫–∏)
async def request_trial(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
    message_func = update.message.reply_text if update.message else update.callback_query.edit_message_text

    if not update.effective_user or not update.effective_user.username:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç—Ä–∏–∞–ª.")
        await message_func(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    username_tg = update.effective_user.username
    marzban_username = f"{username_tg}vpn"
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ç—Ä–∏–∞–ª–∞ –æ—Ç '{username_tg}' (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ '{marzban_username}')")

    try:
        logger.info(f"[Trial Check] –í—ã–∑–æ–≤ marzban.get_user –¥–ª—è '{marzban_username}'")
        response = marzban.get_user(marzban_username)
        logger.info(f"[Trial Check] –û—Ç–≤–µ—Ç –æ—Ç marzban.get_user –¥–ª—è '{marzban_username}': type={type(response)}, is_dict={isinstance(response, dict)}")

        if response and isinstance(response, dict):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            expire = response.get("expire", 0)
            current_time = time.time()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{marzban_username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. Expire: {expire}, Current: {current_time}")

            if expire and expire < current_time:
                # –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
                logger.info(f"–ê–∫–∫–∞—É–Ω—Ç '{marzban_username}' –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.")
                payment_url = response.get('subscription_links', {}).get('payment_url')
                keyboard_list = []
                text = "‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å—Ç–µ–∫!\n\n"
                if payment_url:
                     text += f"–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:\nüí≥ {payment_url}\n\n"
                     keyboard_list.append([InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_confirmed_{username_tg}")])
                else:
                     text += "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.\n"

                text += "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª' (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)."
                reply_markup = InlineKeyboardMarkup(keyboard_list) if keyboard_list else None
                await message_func(text, reply_markup=reply_markup)
            else:
                # –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω
                logger.info(f"–ê–∫–∫–∞—É–Ω—Ç '{marzban_username}' –∞–∫—Ç–∏–≤–µ–Ω.")
                await message_func(
                    "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN –∞–∫–∫–∞—É–Ω—Ç.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_user –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ú–æ–π VPN' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º."
                )
        else:
            # –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º trial
            logger.info(f"–ê–∫–∫–∞—É–Ω—Ç '{marzban_username}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç—Ä–∏–∞–ª.")
            keyboard = [
                [
                    InlineKeyboardButton("‚úÖ –î–∞, —Ö–æ—á—É!", callback_data=f"trial_yes_{username_tg}"),
                    InlineKeyboardButton("‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="trial_no"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await message_func(
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç VPN –∞–∫–∫–∞—É–Ω—Ç–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 5 –¥–Ω–µ–π?",
                reply_markup=reply_markup
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Ç—Ä–∏–∞–ª–∞ –¥–ª—è '{username_tg}': {e}", exc_info=True)
        await message_func(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.data:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π callback_query.")
        return
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏ —É –∫–Ω–æ–ø–∫–∏

    # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ---
    user = update.effective_user
    username_tg = user.username if user else "UnknownUser"
    user_id = user.id if user else "UnknownID"
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '{query.data}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {username_tg} (ID: {user_id})")
    # ---

    # ==================
    #  –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–¢–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤)
    # ==================
    if query.data == "restart_server":
        if not username_tg or not is_operator(username_tg):
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç {username_tg}")
            await query.edit_message_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.")
            return

        await query.edit_message_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞ Marzban (docker restart)...")
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
            logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {username_tg} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'amazing_curran'")
            process = await asyncio.create_subprocess_exec(
                '/usr/bin/docker', 'restart', 'amazing_curran', # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤–µ—Ä–Ω–æ–µ
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate() # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã

            if process.returncode == 0:
                logger.info("–ö–æ–º–∞–Ω–¥–∞ 'docker restart amazing_curran' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
                await query.edit_message_text("‚úÖ –°–µ—Ä–≤–µ—Ä Marzban —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!")
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –±–æ—Ç —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
                # await asyncio.sleep(5)
            else:
                error_msg = stderr.decode().strip() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Docker"
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ Marzban. –ö–æ–¥: {process.returncode}. –û—à–∏–±–∫–∞: {error_msg}")
                await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ Marzban:\n`{error_msg}`", parse_mode='Markdown')

        except FileNotFoundError:
             logger.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: –∫–æ–º–∞–Ω–¥–∞ 'docker' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ /usr/bin/docker")
             await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'docker' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}", exc_info=True)
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.")

    # ==================
    #  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    # ==================
    elif query.data.startswith("payment_confirmed_"):
        confirmed_username_tg = query.data.split("_")[2] # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TG, –Ω–∞–∂–∞–≤—à–µ–≥–æ –∫–Ω–æ–ø–∫—É
        current_time_str = time.strftime('%Y-%m-%d %H:%M:%S')

        admin_chat_id = os.getenv("ADMIN_CHAT_ID")
        if not admin_chat_id:
            logger.error("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env! –ù–µ –º–æ–≥—É —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
            return

        try:
            admin_chat_id_int = int(admin_chat_id)
            message_text = (f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{confirmed_username_tg} (ID: `{user_id}`) "
                            f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'.\n"
                            f"‚è∞ –í—Ä–µ–º—è: {current_time_str}\n"
                            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ/–ø—Ä–æ–¥–ª–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç: `{confirmed_username_tg}vpn`")

            await context.bot.send_message(
                chat_id=admin_chat_id_int,
                text=message_text,
                parse_mode='Markdown'
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç {confirmed_username_tg} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ({admin_chat_id_int}).")
            await query.edit_message_text(
                "‚úÖ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞."
            )

        except ValueError:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_CHAT_ID: '{admin_chat_id}'. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ({admin_chat_id}): {e}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )

    # ==================
    #  –ú–µ–Ω—é: –ú–æ–π VPN
    # ==================
    elif query.data == "menu_get_user":
        # –õ–æ–≥–∏–∫–∞ –ø–æ—á—Ç–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω–∞ /get_user, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç query.edit_message_text
        if not username_tg:
            logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É menu_get_user.")
            await query.edit_message_text(
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return

        marzban_username = f"{username_tg}vpn"
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ú–æ–π VPN' ({username_tg}), –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Marzban '{marzban_username}'")

        try:
            logger.info(f"[Button] –í—ã–∑–æ–≤ marzban.get_user –¥–ª—è '{marzban_username}'")
            response = marzban.get_user(marzban_username)
            logger.info(f"[Button] –û—Ç–≤–µ—Ç –æ—Ç marzban.get_user –¥–ª—è '{marzban_username}': type={type(response)}, is_dict={isinstance(response, dict)}")
            if isinstance(response, dict):
                 logger.debug(f"[Button] –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (dict keys): {response.keys()}")
            elif response is not None:
                 logger.warning(f"[Button] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {response}")


            if response and isinstance(response, dict):
                status = response.get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                expire = response.get("expire", 0)
                expire_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(expire)) if expire else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                current_time = time.time()

                info_text = f"‚ÑπÔ∏è –í–∞—à VPN –∞–∫–∫–∞—É–Ω—Ç:\n"
                info_text += f"üë§ –õ–æ–≥–∏–Ω: `{marzban_username}`\n"
                info_text += f"üö¶ –°—Ç–∞—Ç—É—Å: {status}\n"
                info_text += f"‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {expire_str}\n\n"

                if 'subscription_links' in response and response['subscription_links']:
                    links = response['subscription_links']
                    info_text += "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n"
                    if links.get('subuser_url'):
                        info_text += f"‚ñ∂Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É (–¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π):\n`{links['subuser_url']}`\n\n"
                    if links.get('v2rayng'):
                        info_text += f"üì± Android (V2rayNG):\n`{links['v2rayng']}`\n\n"
                    if links.get('streisand'):
                        info_text += f"üì± iOS (Streisand):\n{links['streisand']}\n\n"

                    payment_url = links.get('payment_url')
                    if payment_url and expire and expire < (current_time + 5 * 86400):
                        keyboard = [
                            [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_url)],
                            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_confirmed_{username_tg}")]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        if expire < current_time:
                            info_text += "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n"
                        else:
                             info_text += "‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç!\n"
                        info_text += "–ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª' –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.\n"
                        await query.edit_message_text(info_text, reply_markup=reply_markup, parse_mode='Markdown')
                    else:
                        await query.edit_message_text(info_text, parse_mode='Markdown')
                else:
                    logger.warning(f"[Button] –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 'subscription_links' –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è '{marzban_username}'")
                    await query.edit_message_text(info_text, parse_mode='Markdown')

            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ API
                logger.warning(f"[Button] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Marzban '{marzban_username}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: {response}")
                # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç—Ä–∏–∞–ª –∫–Ω–æ–ø–∫–∞–º–∏
                keyboard = [
                    [
                        InlineKeyboardButton("‚úÖ –î–∞, —Ö–æ—á—É!", callback_data=f"trial_yes_{username_tg}"),
                        InlineKeyboardButton("‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="trial_no"),
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VPN –∞–∫–∫–∞—É–Ω—Ç–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 5 –¥–Ω–µ–π?",
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"[Button] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ menu_get_user –¥–ª—è '{marzban_username}': {e}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    # ==================
    #  –ú–µ–Ω—é: –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∏–∞–ª (–ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç)
    # ==================
    elif query.data == "menu_get_trial":
        if not username_tg:
             logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É menu_get_trial.")
             await query.edit_message_text(
                 "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
             )
             return

        # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –î–∞/–ù–µ—Ç
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —Ö–æ—á—É!", callback_data=f"trial_yes_{username_tg}"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ", callback_data="trial_no"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π VPN –Ω–∞ 5 –¥–Ω–µ–π?",
            reply_markup=reply_markup
        )

    # ==================
    #  –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ç—Ä–∏–∞–ª
    # ==================
    elif query.data.startswith("trial_yes_"):
        trial_username_tg = query.data.split("_")[2] # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è TG –∏–∑ callback_data
        marzban_username = f"{trial_username_tg}vpn"
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {trial_username_tg} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Ç—Ä–∏–∞–ª. –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç '{marzban_username}'")

        # –ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤–¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –¥–≤–∞–∂–¥—ã –±—ã—Å—Ç—Ä–æ
        if context.user_data.get(f'trial_creating_{trial_username_tg}', False):
            logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–∞–ª–∞ –¥–ª—è {trial_username_tg} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
            await query.answer("–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...", show_alert=True)
            return
        context.user_data[f'trial_creating_{trial_username_tg}'] = True # –§–ª–∞–≥ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è

        try:
            await query.edit_message_text(f"‚è≥ –°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å –ø—Ä–æ–±–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç `{marzban_username}`...", parse_mode='Markdown')
            logger.info(f"–í—ã–∑–æ–≤ marzban.create_user –¥–ª—è '{marzban_username}' (trial=True)")
            response = marzban.create_user(marzban_username, is_trial=True)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç marzban.create_user –¥–ª—è '{marzban_username}': {response}")

            if response and isinstance(response, dict) and response.get("username") == marzban_username:
                # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏
                logger.info(f"–ê–∫–∫–∞—É–Ω—Ç '{marzban_username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏.")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º subscription_url –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                sub_url = response.get("subscription_url")
                if sub_url:
                     subscription_links = marzban.get_subscription_links(marzban_username, sub_url)

                     reply_text = (
                         f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç `{marzban_username}` —Å–æ–∑–¥–∞–Ω!\n\n"
                         f"‚è≥ –û–Ω –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å 5 –¥–Ω–µ–π.\n\n"
                         f"üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n"
                         f"‚ñ∂Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É (–¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π):\n`{subscription_links.get('subuser_url', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}`\n\n"
                         f"üì± Android (V2rayNG):\n`{subscription_links.get('v2rayng', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}`\n\n"
                         f"üì± iOS (Streisand):\n{subscription_links.get('streisand', '–ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}\n\n"
                     )
                     payment_url = subscription_links.get('payment_url')
                     if payment_url:
                         reply_text += f"üí∞ –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è:\n{payment_url}\n\n"
                     else:
                          reply_text += "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n"

                     reply_text += "üí¨ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É @seeyoutubefree"
                     await query.edit_message_text(reply_text, parse_mode='Markdown')
                else:
                     logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å subscription_url –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{marzban_username}'. –û—Ç–≤–µ—Ç: {response}")
                     await query.edit_message_text(
                         f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç `{marzban_username}` —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n"
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /get_user –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", parse_mode='Markdown'
                     )

            elif response and isinstance(response, dict): # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ç–æ, —á—Ç–æ –æ–∂–∏–¥–∞–ª–∏
                error_detail = response.get("detail", "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π")
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–∞–ª –¥–ª—è '{marzban_username}'. –û—Ç–≤–µ—Ç API: {response}")
                if "already exists" in str(error_detail).lower():
                     await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{marzban_username}` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", parse_mode='Markdown')
                else:
                     await query.edit_message_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. –û—à–∏–±–∫–∞ API: {error_detail}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
            else: # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç None –∏–ª–∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–∞–ª –¥–ª—è '{marzban_username}'. –û—Ç–≤–µ—Ç API –±—ã–ª None –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")
                 await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏–∞–ª–∞ –¥–ª—è '{marzban_username}': {e}", exc_info=True)
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
        finally:
             context.user_data[f'trial_creating_{trial_username_tg}'] = False # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥

    # ==================
    #  –û—Ç–∫–∞–∑ –æ—Ç —Ç—Ä–∏–∞–ª–∞
    # ==================
    elif query.data == "trial_no":
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ.")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("get_user", get_user))
        # –î–æ–±–∞–≤–ª—è–µ–º get_trial –∫–∞–∫ –∞–ª–∏–∞—Å –¥–ª—è request_trial (—Ö–æ—Ç—è –ª—É—á—à–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)
        application.add_handler(CommandHandler("get_trial", request_trial))
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        application.add_handler(CommandHandler("disable_user", disable_user))
        application.add_handler(CommandHandler("enable_user", enable_user))

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è)
        application.add_handler(CallbackQueryHandler(button_callback))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        commands = [
            ("start", "üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
            ("get_user", "üì± –ú–æ–π VPN"),
            ("get_trial", "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"),
        ]
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç
        # asyncio.create_task(application.bot.set_my_commands(commands))
        # --> –õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ PTB
        try:
             loop = asyncio.get_event_loop()
             loop.run_until_complete(application.bot.set_my_commands(commands))
             logger.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é: {e}")


        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (polling)...")
        application.run_polling()

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == '__main__':
    main()

# --- END OF FILE bot.py ---