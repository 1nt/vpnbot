# --- START OF FILE bot.py ---

import logging
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from marzban_backend import MarzbanBackend  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –∫–ª–∞—Å—Å
import time
import asyncio
import hashlib
import secrets

# –°–ª–æ–≤–∞—Ä–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
RUSSIAN_TEXTS = {
    "start_greeting": "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN.\n\n–ú—ã –æ–±–Ω–æ–≤–∏–ª–∏ –±–æ—Ç. –¢–µ–ø–µ—Ä—å –≤—Å–µ –ª–æ–≥–∏–Ω—ã —à–∏—Ñ—Ä—É—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤–Ω–∏–∑—É –∏–ª–∏ –∫–Ω–æ–ø–∫—É –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n\n –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ - /get_user –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ\n–ü–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∞ 200—Ä/–º–µ—Å\n\n",
    "router_text": "üõú –ö—É–ø–∏—Ç—å –†–æ—É—Ç–µ—Ä –∏ –∑–∞–±—ã—Ç—å –ø—Ä–æ VPN:\n",
    "support_contact": "üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞, –æ–ø–ª–∞—Ç–∞ –∏ –∫–æ–Ω—Ç–∞–∫—Ç –∞–¥–º–∏–Ω–∞: @AP1int",
    "vpn_account_info": "‚ÑπÔ∏è –í–∞—à VPN –∞–∫–∫–∞—É–Ω—Ç:",
    "login": "üë§ –õ–æ–≥–∏–Ω:",
    "status": "üö¶ –°—Ç–∞—Ç—É—Å:",
    "expires": "‚è≥ –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ:",
    "subscription_expired": "‚ö†Ô∏è –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!",
    "subscription_expiring": "‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —Å–∫–æ—Ä–æ –∏—Å—Ç–µ–∫–∞–µ—Ç!",
    "payment_instructions": "–ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∏–ª–∏ '–Ø –æ–ø–ª–∞—Ç–∏–ª' –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
    "subscription_links_header": "üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n",
    "subscription_link": "‚ñ∂Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É (–¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π):\n",
    "copy_instructions": "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ üëÜ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–µ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n",
    "install_apps_header": "–£—Å—Ç–∞–Ω–æ–≤–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è VPN –Ω–∞ —Å–≤–æ—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:\n",
    "iphone_ipad": "‚Äî iPhone –∏ iPad:",
    "android": "‚Äî Android:",
    "windows": "‚Äî Windows:",
    "macos_m1": "‚Äî macOS (–ø—Ä–æ—Ü. M1‚ÄìM4):",
    "macos_intel": "‚Äî macOS (–ø—Ä–æ—Ü. Intel):",
    "androidtv": "‚Äî AndroidTV:",
    "linux": "‚Äî Linux:",
    "trial_offer": "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç VPN –∞–∫–∫–∞—É–Ω—Ç–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 10 –¥–Ω–µ–π?",
    "trial_created": "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç",
    "trial_duration": "‚è≥ –û–Ω –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å 10 –¥–Ω–µ–π.\n\n",
    "payment_option": "üí∞ –í—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏–ø—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è:\n",
    "payment_link_not_found": "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n\n",
    "trial_questions": "üí¨ –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –≤ –≥—Ä—É–ø–ø—É @seeyoutubefree",
    "trial_declined": "–•–æ—Ä–æ—à–æ, –≤—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.",
    "account_already_exists": "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN –∞–∫–∫–∞—É–Ω—Ç.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_user –∏–ª–∏ –∫–Ω–æ–ø–∫—É '–ú–æ–π VPN' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º.",
    "account_expired": "‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å—Ç–µ–∫!\n\n",
    "payment_for_renewal": "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:\nüí≥",
    "payment_confirmation": "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª' (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞).",
    "payment_sent": "‚úÖ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏/–ø—Ä–æ–¥–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞.",
    "payment_notification": "üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    "payment_time": "‚è∞ –í—Ä–µ–º—è:",
    "payment_check_request": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ/–ø—Ä–æ–¥–ª–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:",
    "server_restart": "‚è≥ –ù–∞—á–∏–Ω–∞—é –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É —Å–µ—Ä–≤–µ—Ä–∞ tf2-server (docker restart)...",
    "server_restarted": "‚úÖ –°–µ—Ä–≤–µ—Ä tf2-server —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω!",
    "server_restart_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ tf2-server:\n",
    "docker_not_found": "‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ 'docker' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.",
    "restart_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞.",
    "no_permission": "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.",
    "user_not_found": "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
    "account_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "trial_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "trial_creation_error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. –û—à–∏–±–∫–∞ API:",
    "trial_server_error": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "trial_unexpected_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "trial_already_exists": "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
    "already_exists": "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.",
    "try_later": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "account_created_no_links": "‚úÖ –ê–∫–∫–∞—É–Ω—Ç",
    "created_but_no_links": "—Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /get_user –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "config_error": "‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "admin_notification_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
    "trial_creating": "‚è≥ –°–æ–∑–¥–∞—é –¥–ª—è –≤–∞—Å –ø—Ä–æ–±–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç",
    "trial_processing": "–ó–∞–ø—Ä–æ—Å —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...",
    "menu_my_vpn": "üì± –ú–æ–π VPN",
    "menu_get_trial": "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
    "menu_restart_server": "üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä",
    "button_pay": "üí≥ –û–ø–ª–∞—Ç–∏—Ç—å",
    "button_payment_confirmed": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã",
    "button_trial_yes": "‚úÖ –î–∞, —Ö–æ—á—É!",
    "button_trial_no": "‚ùå –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ",
    "button_payment_confirmed_text": "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª",
    "commands_start": "üöÄ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
    "commands_get_user": "üì± –ú–æ–π VPN",
    "commands_get_trial": "üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"
}

ENGLISH_TEXTS = {
    "start_greeting": "Hello! I'm a VPN management bot.\n\nWe have updated the bot. All logins are now encrypted, so for any questions, use the contact below or the Check payment button.\nChoose an action below:\n\nFor example - /get_user to get information about your subscription\nWhile the server is in testing mode, then subscription 200r/month\n\n",
    "router_text": "üõú Buy a Router and forget about VPN:\n",
    "support_contact": "üí¨ Technical support, payment and admin contact: @AP1int",
    "vpn_account_info": "‚ÑπÔ∏è Your VPN account:",
    "login": "üë§ Login:",
    "status": "üö¶ Status:",
    "expires": "‚è≥ Expires:",
    "subscription_expired": "‚ö†Ô∏è Your subscription has expired!",
    "subscription_expiring": "‚è≥ Your subscription expires soon!",
    "payment_instructions": "Click 'Pay' to renew or 'I paid' after payment.",
    "subscription_links_header": "üîó Connection links:\n\n",
    "subscription_link": "‚ñ∂Ô∏è Subscription link (for applications):\n",
    "copy_instructions": "Click the link above üëÜ to copy it to clipboard and paste it into the application depending on your device.\n\n",
    "install_apps_header": "Install one of the VPN applications on your device:\n",
    "iphone_ipad": "‚Äî iPhone and iPad:",
    "android": "‚Äî Android:",
    "windows": "‚Äî Windows:",
    "macos_m1": "‚Äî macOS (M1-M4 proc.):",
    "macos_intel": "‚Äî macOS (Intel proc.):",
    "androidtv": "‚Äî AndroidTV:",
    "linux": "‚Äî Linux:",
    "trial_offer": "You don't have a VPN account yet. Want to get a 10-day trial access?",
    "trial_created": "‚úÖ Trial account",
    "trial_duration": "‚è≥ It will be valid for 10 days.\n\n",
    "payment_option": "üí∞ You can pay for subscription at any time:\n",
    "payment_link_not_found": "Payment link not found.\n\n",
    "trial_questions": "üí¨ If you have questions, write to the group @seeyoutubefree",
    "trial_declined": "Okay, you declined the trial period. If you change your mind, just click the button again.",
    "account_already_exists": "You already have an active VPN account.\nUse the /get_user command or 'My VPN' button to get information about it.",
    "account_expired": "‚ö†Ô∏è Your account has expired!\n\n",
    "payment_for_renewal": "To renew access, please pay for the subscription:\nüí≥",
    "payment_confirmation": "After payment, click the 'I paid' button (if available).",
    "payment_sent": "‚úÖ Your confirmation has been sent to the administrator.\nWait for verification and activation/renewal of the account.",
    "payment_notification": "üí∞ User",
    "payment_time": "‚è∞ Time:",
    "payment_check_request": "Please check the payment and activate/renew the account:",
    "server_restart": "‚è≥ Starting server tf2-server restart (docker restart)...",
    "server_restarted": "‚úÖ Server tf2-server successfully restarted!",
    "server_restart_error": "‚ùå Error restarting server tf2-server:\n",
    "docker_not_found": "‚ùå Error: 'docker' command not found.",
    "restart_error": "‚ùå An unexpected error occurred while restarting the server.",
    "no_permission": "‚ùå You don't have permission to perform this operation.",
    "user_not_found": "‚ùå Error: Could not determine user.",
    "account_error": "‚ùå An error occurred while getting information about your account.\nPlease try again later or contact support.",
    "trial_error": "‚ùå An error occurred while processing your request.\nPlease try again later or contact support.",
    "trial_creation_error": "‚ùå Failed to create trial account. API error:",
    "trial_server_error": "‚ùå Failed to create trial account. Server error occurred. Try again later or contact support.",
    "trial_unexpected_error": "‚ùå An unexpected error occurred while creating the account.\nPlease try again later or contact support.",
    "trial_already_exists": "‚ùå Failed to create account: user",
    "already_exists": "already exists.",
    "try_later": "Try again later or contact support.",
    "account_created_no_links": "‚úÖ Account",
    "created_but_no_links": "created but failed to get connection links.\nPlease try /get_user later or contact support.",
    "config_error": "‚ùå Configuration error: Could not notify administrator.\nPlease contact support.",
    "admin_notification_error": "‚ùå An error occurred while sending notification to administrator.\nPlease contact support.",
    "trial_creating": "‚è≥ Creating trial account for you",
    "trial_processing": "Request is already being processed...",
    "menu_my_vpn": "üì± My VPN",
    "menu_get_trial": "üéÅ Get trial period",
    "menu_restart_server": "üîÑ Restart server",
    "button_pay": "üí≥ Pay",
    "button_payment_confirmed": "‚úÖ Payment verification",
    "button_trial_yes": "‚úÖ Yes, I want!",
    "button_trial_no": "‚ùå No, thanks",
    "button_payment_confirmed_text": "‚úÖ I paid",
    "commands_start": "üöÄ Main menu",
    "commands_get_user": "üì± My VPN",
    "commands_get_trial": "üéÅ Get trial period"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
def get_text(language_code: str, key: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ
    language_code: –∫–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'ru', 'en')
    key: –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    returns: —Ç–µ–∫—Å—Ç –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    """
    logger.debug(f"get_text –≤—ã–∑–≤–∞–Ω —Å language_code='{language_code}', key='{key}'")
    
    if language_code and language_code.startswith('ru'):
        result = RUSSIAN_TEXTS.get(key, ENGLISH_TEXTS.get(key, key))
        logger.debug(f"–í—ã–±—Ä–∞–Ω —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è '{key}': {result[:30]}...")
        return result
    else:
        result = ENGLISH_TEXTS.get(key, key)
        logger.debug(f"–í—ã–±—Ä–∞–Ω –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è '{key}': {result[:30]}...")
        return result

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    logger.critical("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit("–û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
SECRET = os.getenv("SECRET")
if not SECRET:
    logger.critical("SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
    exit("–û—à–∏–±–∫–∞: SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ .env
OPERATORS = os.getenv("OPERATORS", "").split(",")
OPERATORS = [op.strip() for op in OPERATORS if op.strip()]  # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ø—Ä–æ–±–µ–ª—ã
logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏–∑ .env: {OPERATORS}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def generate_marzban_username(user_id: int) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ ID Telegram —Å —Å–æ–ª—å—é SECRET
    user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    returns: 5 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ A-Z a-z 0-9
    """
    logger.debug(f"generate_marzban_username –≤—ã–∑–≤–∞–Ω —Å user_id={user_id}")
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è: ID + SECRET
    data_to_hash = f"{user_id}{SECRET}"
    
    # –°–æ–∑–¥–∞–µ–º SHA-256 —Ö–µ—à
    hash_object = hashlib.sha256(data_to_hash.encode())
    hash_hex = hash_object.hexdigest()
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤ —Ö–µ—à–∞ –¥–ª—è –±–æ–ª—å—à–µ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
    hash_part = hash_hex[:10]
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    # 0-9 -> 0-9, a-f -> a-z, –æ—Å—Ç–∞–ª—å–Ω–æ–µ -> A-Z
    char_map = {}
    for i in range(10):
        char_map[chr(ord('0') + i)] = chr(ord('0') + i)  # 0-9
    for i in range(6):
        char_map[chr(ord('a') + i)] = chr(ord('a') + i)  # a-f -> a-z
    for i in range(6, 26):
        char_map[chr(ord('a') + i)] = chr(ord('A') + i)  # g-z -> A-Z
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ö–µ—à –≤ –Ω—É–∂–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    result = ""
    for char in hash_part:
        if char in char_map:
            result += char_map[char]
        else:
            # –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª –Ω–µ –≤ –º–∞–ø–ø–∏–Ω–≥–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å
            result += char
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
    final_result = result[:5]
    logger.debug(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{final_result}' –∏–∑ —Ö–µ—à–∞ '{hash_part}'")
    return final_result

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MarzbanBackend
try:
    marzban = MarzbanBackend()
    logger.info("MarzbanBackend —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e:
    logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å MarzbanBackend: {e}", exc_info=True)
    exit(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ MarzbanBackend: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
def is_operator(username: str) -> bool:
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ DEBUG —É—Ä–æ–≤–µ–Ω—å –≤–∫–ª—é—á–µ–Ω, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
    # logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{username}' –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –°–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {OPERATORS}")
    result = username in OPERATORS
    logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ '{username}': {result} (—Å–ø–∏—Å–æ–∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {OPERATORS})")
    return result

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
def format_subscription_links(links: dict, language_code: str = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Å—ã–ª–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: —Å–Ω–∞—á–∞–ª–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É, –∑–∞—Ç–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    links: —Å–ª–æ–≤–∞—Ä—å —Å —Å—Å—ã–ª–∫–∞–º–∏ –ø–æ–¥–ø–∏—Å–∫–∏
    language_code: –∫–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    returns: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    """
    logger.debug(f"format_subscription_links –≤—ã–∑–≤–∞–Ω —Å language_code='{language_code}'")
    logger.debug(f"–¢–∏–ø language_code: {type(language_code)}, –∑–Ω–∞—á–µ–Ω–∏–µ: '{language_code}'")
    
    links_text = ""
    if links.get('subuser_url'):
        links_text += (
            f"{get_text(language_code, 'subscription_link')}"
            f"`{links['subuser_url']}`\n"
            f"{get_text(language_code, 'copy_instructions')}"
        )
    links_text += (
        f"{get_text(language_code, 'install_apps_header')}"
        f"{get_text(language_code, 'iphone_ipad')} "
        "[Streisand](https://apps.apple.com/app/id6450534064), "
        "[v2RayTun](https://apps.apple.com/us/app/v2raytun/id6476628951?platform=iphone)\n"
        f"{get_text(language_code, 'android')} "
        "[Happ](https://play.google.com/store/apps/details?id=com.happproxy), "
        "[v2RayTun](https://play.google.com/store/apps/details?id=com.v2raytun.android&hl=ru), "
        "[Hiddify](https://play.google.com/store/apps/details?id=app.hiddify.com)\n"
        "[–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Happ](https://telegra.ph/Instrukciya-Android-08-11)\n"
        f"{get_text(language_code, 'windows')} "
        "[Hiddify](https://apps.microsoft.com/detail/9PDFNL3QV2S5?hl=neutral&gl=RU&ocid=pdpshare), "
        "[Nekoray (NekoBox)](https://github.com/MatsuriDayo/nekoray/releases/download/4.0.1/nekoray-4.0.1-2024-12-12-windows64.zip)\n"
        f"{get_text(language_code, 'macos_m1')} "
        "[Streisand](https://apps.apple.com/app/id6450534064), "
        "[v2RayTun](https://apps.apple.com/us/app/v2raytun/id6476628951?platform=mac)\n"
        f"{get_text(language_code, 'macos_intel')} "
        "[v2RayTun](https://apps.apple.com/us/app/v2raytun/id6476628951?platform=mac), "
        "[V2Box](https://apps.apple.com/us/app/v2box-v2ray-client/id6446814690)\n"
        f"{get_text(language_code, 'androidtv')} "
        "[Hiddify](https://play.google.com/store/apps/details?id=app.hiddify.com), "
        "[Happ](https://play.google.com/store/apps/details?id=com.happproxy), "
        "[v2RayTun](https://play.google.com/store/apps/details?id=com.v2raytun.android&hl=ru)\n"
        f"{get_text(language_code, 'linux')} "
        "[Hiddify](https://github.com/hiddify/hiddify-app/releases/latest/download/Hiddify-Linux-x64.AppImage)\n"
    )
    
    logger.debug(f"–†–µ–∑—É–ª—å—Ç–∞—Ç format_subscription_links –¥–ª—è —è–∑—ã–∫–∞ '{language_code}': {links_text[:100]}...")
    return links_text

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é start —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ effective_user.")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å
        return

    current_user = update.effective_user.username or str(update.effective_user.id)
    language_code = update.effective_user.language_code
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_user} (—è–∑—ã–∫: {language_code})")
    logger.info(f"–¢–∏–ø language_code: {type(language_code)}, –∑–Ω–∞—á–µ–Ω–∏–µ: '{language_code}'")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ is_operator: {is_operator(current_user) if current_user else False}")

    keyboard = [
        [InlineKeyboardButton(get_text(language_code, "menu_my_vpn"), callback_data="menu_get_user")],
        [InlineKeyboardButton(get_text(language_code, "menu_get_trial"), callback_data="menu_get_trial")],
    ]

    if update.effective_user.username and is_operator(update.effective_user.username):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user} —è–≤–ª—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")
        keyboard.append([InlineKeyboardButton(get_text(language_code, "menu_restart_server"), callback_data="restart_server")])
    # else:
        # logger.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user} –Ω–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏")

    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–æ—É—Ç–µ—Ä–æ–º
    router_text = ""
    if marzban.router_url:
        router_text = f"{get_text(language_code, 'router_text')}{marzban.router_url}\n\n"
    else:
        router_text = f"{get_text(language_code, 'router_text')}https://ozon.ru/product/2288765942\n\n"
    
    # –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    start_greeting = get_text(language_code, 'start_greeting')
    router_text_final = router_text
    support_contact = get_text(language_code, 'support_contact')
    logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –¥–ª—è —è–∑—ã–∫–∞ '{language_code}':")
    logger.info(f"start_greeting: {start_greeting[:50]}...")
    logger.info(f"router_text: {router_text_final[:50]}...")
    logger.info(f"support_contact: {support_contact[:50]}...")
    
    await update.message.reply_text(
        f"{start_greeting}"
        f"{router_text_final}"
        f"{support_contact}",
        reply_markup=reply_markup,
        disable_web_page_preview=True
    )

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ VPN
async def get_user_vpn_info(user_id: int, username: str = None, message_func=None, language_code: str = None) -> None:
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    username: username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    message_func: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (update.message.reply_text –∏–ª–∏ query.edit_message_text)
    language_code: –∫–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_identifier = username or str(user_id)
    marzban_username = generate_marzban_username(user_id)
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ VPN –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è '{user_identifier}' (Marzban: '{marzban_username}', —è–∑—ã–∫: '{language_code}')")
    logger.info(f"–¢–∏–ø language_code: {type(language_code)}, –∑–Ω–∞—á–µ–Ω–∏–µ: '{language_code}'")

    try:
        logger.info(f"–í—ã–∑–æ–≤ marzban.get_user –¥–ª—è '{marzban_username}'")
        response = marzban.get_user(marzban_username)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç marzban.get_user –¥–ª—è '{marzban_username}': type={type(response)}, is_dict={isinstance(response, dict)}")
        if isinstance(response, dict):
             logger.debug(f"–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (dict keys): {response.keys()}")
        elif response is not None:
             logger.warning(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞: {response}")

        if response and isinstance(response, dict): # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
            status = response.get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            expire = response.get("expire", 0)
            expire_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(expire)) if expire else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            current_time = time.time()

            info_text = f"{get_text(language_code, 'vpn_account_info')}\n"
            info_text += f"{get_text(language_code, 'login')} `{marzban_username}`\n" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
            info_text += f"{get_text(language_code, 'status')} {status}\n"
            info_text += f"{get_text(language_code, 'expires')} {expire_str}\n\n"

            if 'subscription_links' in response and response['subscription_links']:
                links = response['subscription_links']
                info_text += format_subscription_links(links, language_code)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏ –æ–ø–ª–∞—Ç—ã
                payment_url = links.get('payment_url')
                # –£—Å–ª–æ–≤–∏–µ: (–∏—Å—Ç–µ–∫ –ò–õ–ò –∏—Å—Ç–µ–∫–∞–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 29 –¥–Ω–µ–π) –ò –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
                if payment_url and expire < (current_time + 29 * 86400):
                    keyboard = [
                        [InlineKeyboardButton(get_text(language_code, "button_pay"), url=payment_url)],
                        [InlineKeyboardButton(get_text(language_code, "button_payment_confirmed"), callback_data=f"payment_confirmed_{user_identifier}")]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    if expire < current_time:
                        info_text += f"{get_text(language_code, 'subscription_expired')}\n"
                    else:
                         info_text += f"{get_text(language_code, 'subscription_expiring')}\n"
                    info_text += f"{get_text(language_code, 'payment_instructions')}\n"
                    await message_func(info_text, reply_markup=reply_markup, parse_mode='Markdown', disable_web_page_preview=True)
                else:
                    await message_func(info_text, parse_mode='Markdown', disable_web_page_preview=True)
            else:
                 logger.warning(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç 'subscription_links' –≤ –æ—Ç–≤–µ—Ç–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{marzban_username}'")
                 await message_func(info_text, parse_mode='Markdown', disable_web_page_preview=True) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±–µ–∑ —Å—Å—ã–ª–æ–∫

        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ò–õ–ò Marzban –≤–µ—Ä–Ω—É–ª —á—Ç–æ-—Ç–æ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ (None –∏–ª–∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å)
            logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Marzban '{marzban_username}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç: {response}")
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç—Ä–∏–∞–ª —á–µ—Ä–µ–∑ –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
            await request_trial_common(user_id, username, message_func, language_code)

    except Exception as e:
        # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ ---
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ get_user_vpn_info –¥–ª—è Marzban user '{marzban_username}': {e}", exc_info=True)
        await message_func(
            f"{get_text(language_code, 'account_error')}",
            disable_web_page_preview=True
        )

# –ö–æ–º–∞–Ω–¥–∞ /get_user
async def get_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not update.effective_user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω /get_user –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ effective_user.")
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            disable_web_page_preview=True
        )
        return

    user_id = update.effective_user.id
    username = update.effective_user.username
    language_code = update.effective_user.language_code
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /get_user –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username or user_id} (—è–∑—ã–∫: {language_code})")
    logger.info(f"–¢–∏–ø language_code: {type(language_code)}, –∑–Ω–∞—á–µ–Ω–∏–µ: '{language_code}'")
    
    await get_user_vpn_info(user_id, username, update.message.reply_text, language_code)

# –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
async def request_trial_common(user_id: int, username: str = None, message_func=None, language_code: str = None) -> None:
    """
    –û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
    user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
    username: username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram (–º–æ–∂–µ—Ç –±—ã—Ç—å None)
    message_func: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    language_code: –∫–æ–¥ —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_identifier = username or str(user_id)
    marzban_username = generate_marzban_username(user_id)
    logger.info(f"–ó–∞–ø—Ä–æ—Å —Ç—Ä–∏–∞–ª–∞ –æ—Ç '{user_identifier}' (–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ '{marzban_username}', —è–∑—ã–∫: '{language_code}')")
    logger.info(f"–¢–∏–ø language_code: {type(language_code)}, –∑–Ω–∞—á–µ–Ω–∏–µ: '{language_code}'")

    try:
        logger.info(f"[Trial Check] –í—ã–∑–æ–≤ marzban.get_user –¥–ª—è '{marzban_username}'")
        response = marzban.get_user(marzban_username)
        logger.info(f"[Trial Check] –û—Ç–≤–µ—Ç –æ—Ç marzban.get_user –¥–ª—è '{marzban_username}': type={type(response)}, is_dict={isinstance(response, dict)}")

        if response and isinstance(response, dict):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            expire = response.get("expire", 0)
            current_time = time.time()
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å '{marzban_username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. Expire: {expire}, Current: {current_time}")

            if expire and expire < current_time:
                # –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
                logger.info(f"–ê–∫–∫–∞—É–Ω—Ç '{marzban_username}' –ø—Ä–æ—Å—Ä–æ—á–µ–Ω.")
                payment_url = response.get('subscription_links', {}).get('payment_url')
                keyboard_list = []
                text = f"{get_text(language_code, 'account_expired')}\n\n"
                if payment_url:
                     text += f"{get_text(language_code, 'payment_for_renewal')} {payment_url}\n\n"
                     keyboard_list.append([InlineKeyboardButton(get_text(language_code, "button_payment_confirmed_text"), callback_data=f"payment_confirmed_{user_identifier}")])
                else:
                     text += f"{get_text(language_code, 'payment_link_not_found')}\n"

                text += f"{get_text(language_code, 'payment_confirmation')}"
                reply_markup = InlineKeyboardMarkup(keyboard_list) if keyboard_list else None
                await message_func(text, reply_markup=reply_markup, disable_web_page_preview=True)
            else:
                # –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω
                logger.info(f"–ê–∫–∫–∞—É–Ω—Ç '{marzban_username}' –∞–∫—Ç–∏–≤–µ–Ω.")
                await message_func(
                    get_text(language_code, "account_already_exists"),
                    disable_web_page_preview=True
                )
        else:
            # –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º trial
            logger.info(f"–ê–∫–∫–∞—É–Ω—Ç '{marzban_username}' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç—Ä–∏–∞–ª.")
            keyboard = [
                [
                    InlineKeyboardButton(get_text(language_code, "button_trial_yes"), callback_data=f"trial_yes_{user_identifier}"),
                    InlineKeyboardButton(get_text(language_code, "button_trial_no"), callback_data="trial_no"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await message_func(
                get_text(language_code, "trial_offer"),
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ —Ç—Ä–∏–∞–ª–∞ –¥–ª—è '{user_identifier}': {e}", exc_info=True)
        await message_func(
            f"{get_text(language_code, 'trial_error')}",
            disable_web_page_preview=True
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ /get_user –∏–ª–∏ –∫–Ω–æ–ø–∫–∏)
async def request_trial(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ
    message_func = update.message.reply_text if update.message else update.callback_query.edit_message_text

    if not update.effective_user:
        logger.warning("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ effective_user –ø–æ–ø—ã—Ç–∞–ª—Å—è –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Ç—Ä–∏–∞–ª.")
        await message_func(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            disable_web_page_preview=True
        )
        return

    user_id = update.effective_user.id
    username = update.effective_user.username
    language_code = update.effective_user.language_code
    
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /get_trial –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username or user_id} (—è–∑—ã–∫: {language_code})")
    logger.info(f"–¢–∏–ø language_code: {type(language_code)}, –∑–Ω–∞—á–µ–Ω–∏–µ: '{language_code}'")
    
    await request_trial_common(user_id, username, message_func, language_code)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    if not query or not query.data:
        logger.warning("–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π callback_query.")
        return
    await query.answer() # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏ —É –∫–Ω–æ–ø–∫–∏

    # --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ---
    user = update.effective_user
    if not user:
        logger.warning("–ü–æ–ª—É—á–µ–Ω callback_query –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ effective_user.")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", disable_web_page_preview=True)
        return
        
    user_id = user.id
    username_tg = user.username
    user_identifier = username_tg or str(user_id)
    language_code = user.language_code
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '{query.data}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_identifier} (ID: {user_id}, —è–∑—ã–∫: {language_code})")
    logger.info(f"–¢–∏–ø language_code: {type(language_code)}, –∑–Ω–∞—á–µ–Ω–∏–µ: '{language_code}'")
    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ is_operator: {is_operator(user_identifier) if username_tg else False}")
    # ---

    # ==================
    #  –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (–¢–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤)
    # ==================
    if query.data == "restart_server":
        if not username_tg or not is_operator(username_tg):
            logger.warning(f"–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –æ—Ç {user_identifier}")
            await query.edit_message_text(get_text(language_code, "no_permission"), disable_web_page_preview=True)
            return

        await query.edit_message_text(get_text(language_code, "server_restart"), disable_web_page_preview=True)
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
            logger.info(f"–û–ø–µ—Ä–∞—Ç–æ—Ä {user_identifier} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'tf2-server'")
            process = await asyncio.create_subprocess_exec(
                '/usr/bin/docker', 'restart', 'tf2-server', # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤–µ—Ä–Ω–æ–µ
                stdout=asyncio.subprocess.PIPE,
                stderr=asyncio.subprocess.PIPE
            )
            stdout, stderr = await process.communicate() # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã

            if process.returncode == 0:
                logger.info("–ö–æ–º–∞–Ω–¥–∞ 'docker restart tf2-server' —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
                await query.edit_message_text(get_text(language_code, "server_restarted"), disable_web_page_preview=True)
                # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –±–æ—Ç —Å–Ω–æ–≤–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è
                # await asyncio.sleep(5)
            else:
                error_msg = stderr.decode().strip() if stderr else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ Docker"
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞ tf2-server. –ö–æ–¥: {process.returncode}. –û—à–∏–±–∫–∞: {error_msg}")
                await query.edit_message_text(f"{get_text(language_code, 'server_restart_error')}`{error_msg}`", parse_mode='Markdown', disable_web_page_preview=True)

        except FileNotFoundError:
             logger.error("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏: –∫–æ–º–∞–Ω–¥–∞ 'docker' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏ /usr/bin/docker")
             await query.edit_message_text(get_text(language_code, "docker_not_found"), disable_web_page_preview=True)
        except Exception as e:
            logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}", exc_info=True)
            await query.edit_message_text(get_text(language_code, "restart_error"), disable_web_page_preview=True)

    # ==================
    #  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
    # ==================
    elif query.data.startswith("payment_confirmed_"):
        confirmed_user_identifier = query.data.split("_")[2] # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–∂–∞–≤—à–µ–≥–æ –∫–Ω–æ–ø–∫—É
        current_time_str = time.strftime('%Y-%m-%d %H:%M:%S')
        marzban_username = generate_marzban_username(user_id)

        admin_chat_id = os.getenv("ADMIN_CHAT_ID")
        if not admin_chat_id:
            logger.error("ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env! –ù–µ –º–æ–≥—É —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            await query.edit_message_text(
                get_text(language_code, "config_error"),
                disable_web_page_preview=True
            )
            return

        try:
            admin_chat_id_int = int(admin_chat_id)
            message_text = (f"{get_text(language_code, 'payment_notification')} {user_identifier} (ID: `{user_id}`) "
                            f"–Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'.\n"
                            f"{get_text(language_code, 'payment_time')} {current_time_str}\n"
                            f"{get_text(language_code, 'payment_check_request')} `{marzban_username}`")

            await context.bot.send_message(
                chat_id=admin_chat_id_int,
                text=message_text,
                parse_mode='Markdown'
            )
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç {user_identifier} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ({admin_chat_id_int}).")
            await query.edit_message_text(
                get_text(language_code, "payment_sent"),
                disable_web_page_preview=True
            )

        except ValueError:
            logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_CHAT_ID: '{admin_chat_id}'. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ.")
            await query.edit_message_text(
                get_text(language_code, "config_error"),
                disable_web_page_preview=True
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ({admin_chat_id}): {e}", exc_info=True)
            await query.edit_message_text(
                get_text(language_code, "admin_notification_error"),
                disable_web_page_preview=True
            )

    # ==================
    #  –ú–µ–Ω—é: –ú–æ–π VPN
    # ==================
    elif query.data == "menu_get_user":
        await get_user_vpn_info(user_id, username_tg, query.edit_message_text, language_code)

    # ==================
    #  –ú–µ–Ω—é: –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–∏–∞–ª
    # ==================
    elif query.data == "menu_get_trial":
        await request_trial_common(user_id, username_tg, query.edit_message_text, language_code)

    # ==================
    #  –°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ç—Ä–∏–∞–ª
    # ==================
    elif query.data.startswith("trial_yes_"):
        trial_user_identifier = query.data.split("_")[2] # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        marzban_username = generate_marzban_username(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_identifier} —Å–æ–≥–ª–∞—Å–∏–ª—Å—è –Ω–∞ —Ç—Ä–∏–∞–ª. –°–æ–∑–¥–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç '{marzban_username}'")

        # –ù–µ–±–æ–ª—å—à–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –≤–¥—Ä—É–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –¥–≤–∞–∂–¥—ã –±—ã—Å—Ç—Ä–æ
        if context.user_data.get(f'trial_creating_{trial_user_identifier}', False):
            logger.warning(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–∞–ª–∞ –¥–ª—è {trial_user_identifier} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
            await query.answer(get_text(language_code, "trial_processing"), show_alert=True)
            return
        context.user_data[f'trial_creating_{trial_user_identifier}'] = True # –§–ª–∞–≥ –Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–Ω–∏—è

        try:
            await query.edit_message_text(f"{get_text(language_code, 'trial_creating')} `{marzban_username}`...", parse_mode='Markdown', disable_web_page_preview=True)
            logger.info(f"–í—ã–∑–æ–≤ marzban.create_user –¥–ª—è '{marzban_username}' (trial=True)")
            response = marzban.create_user(marzban_username, is_trial=True)
            logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç marzban.create_user –¥–ª—è '{marzban_username}': {response}")

            if response and isinstance(response, dict) and response.get("username") == marzban_username:
                # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏, —Ç–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏
                logger.info(f"–ê–∫–∫–∞—É–Ω—Ç '{marzban_username}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏.")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º subscription_url –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                sub_url = response.get("subscription_url")
                if sub_url:
                     subscription_links = marzban.get_subscription_links(marzban_username, sub_url)

                     reply_text = (
                         f"{get_text(language_code, 'trial_created')} `{marzban_username}` —Å–æ–∑–¥–∞–Ω!\n\n"
                         f"{get_text(language_code, 'trial_duration')}"
                         f"{format_subscription_links(subscription_links, language_code)}\n\n"
                     )
                     payment_url = subscription_links.get('payment_url')
                     if payment_url:
                         reply_text += f"{get_text(language_code, 'payment_option')}{payment_url}\n\n"
                     else:
                          reply_text += f"{get_text(language_code, 'payment_link_not_found')}"

                     reply_text += f"{get_text(language_code, 'trial_questions')}"
                     await query.edit_message_text(reply_text, parse_mode='Markdown', disable_web_page_preview=True)
                else:
                     logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å subscription_url –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '{marzban_username}'. –û—Ç–≤–µ—Ç: {response}")
                     await query.edit_message_text(
                         f"{get_text(language_code, 'account_created_no_links')} `{marzban_username}` {get_text(language_code, 'created_but_no_links')}", parse_mode='Markdown', disable_web_page_preview=True
                     )

            elif response and isinstance(response, dict): # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –µ—Å—Ç—å, –Ω–æ –Ω–µ —Ç–æ, —á—Ç–æ –æ–∂–∏–¥–∞–ª–∏
                error_detail = response.get("detail", "–ù–µ—Ç –¥–µ—Ç–∞–ª–µ–π")
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–∞–ª –¥–ª—è '{marzban_username}'. –û—Ç–≤–µ—Ç API: {response}")
                if "already exists" in str(error_detail).lower():
                     await query.edit_message_text(f"{get_text(language_code, 'trial_already_exists')} `{marzban_username}` {get_text(language_code, 'already_exists')}", parse_mode='Markdown', disable_web_page_preview=True)
                else:
                     await query.edit_message_text(f"{get_text(language_code, 'trial_creation_error')} {error_detail}. {get_text(language_code, 'try_later')}", disable_web_page_preview=True)
            else: # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç None –∏–ª–∏ –Ω–µ —Å–ª–æ–≤–∞—Ä—å
                 logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–∏–∞–ª –¥–ª—è '{marzban_username}'. –û—Ç–≤–µ—Ç API –±—ã–ª None –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π.")
                 await query.edit_message_text(f"{get_text(language_code, 'trial_server_error')}", disable_web_page_preview=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∏–∞–ª–∞ –¥–ª—è '{marzban_username}': {e}", exc_info=True)
            await query.edit_message_text(
                f"{get_text(language_code, 'trial_unexpected_error')}\n{get_text(language_code, 'try_later')}",
                disable_web_page_preview=True
            )
        finally:
             context.user_data[f'trial_creating_{trial_user_identifier}'] = False # –°–Ω–∏–º–∞–µ–º —Ñ–ª–∞–≥

    # ==================
    #  –û—Ç–∫–∞–∑ –æ—Ç —Ç—Ä–∏–∞–ª–∞
    # ==================
    elif query.data == "trial_no":
        await query.edit_message_text(get_text(language_code, "trial_declined"), disable_web_page_preview=True)


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main() -> None:
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logger.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    logger.info(f"  TELEGRAM_BOT_TOKEN: {'***' if TELEGRAM_BOT_TOKEN else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    logger.info(f"  SECRET: {'***' if SECRET else '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}")
    logger.info(f"  OPERATORS: {OPERATORS}")
    
    try:
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        logger.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram –±–æ—Ç–∞ —Å–æ–∑–¥–∞–Ω–æ.")

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("get_user", get_user))
        # –î–æ–±–∞–≤–ª—è–µ–º get_trial –∫–∞–∫ –∞–ª–∏–∞—Å –¥–ª—è request_trial (—Ö–æ—Ç—è –ª—É—á—à–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)
        application.add_handler(CommandHandler("get_trial", request_trial))

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ (–¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è)
        application.add_handler(CallbackQueryHandler(button_callback))
        logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        commands = [
            ("start", get_text("en", "commands_start")),
            ("get_user", get_text("en", "commands_get_user")),
            ("get_trial", get_text("en", "commands_get_trial")),
        ]
        logger.info(f"–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é: {commands}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ä—Ç
        # asyncio.create_task(application.bot.set_my_commands(commands))
        # --> –õ—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ –∑–∞–ø—É—Å–∫–∞, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –≤ –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ PTB
        try:
             loop = asyncio.get_event_loop()
             loop.run_until_complete(application.bot.set_my_commands(commands))
             logger.info("–ö–æ–º–∞–Ω–¥—ã –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –º–µ–Ω—é: {e}")


        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (polling)...")
        application.run_polling(drop_pending_updates=True)

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)

if __name__ == '__main__':
    main()

# --- END OF FILE bot.py ---