import logging
import os
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
from marzban_backend import MarzbanBackend  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à –∫–ª–∞—Å—Å
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MarzbanBackend
marzban = MarzbanBackend()

# –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é start —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    keyboard = [
        [InlineKeyboardButton("üì± –ú–æ–π VPN", callback_data="menu_get_user")],
        [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥", callback_data="menu_get_trial")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è VPN.\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã:\n\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä - /get_user –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–µ\n'
        '–ü–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –≤ —Ä–µ–∂–∏–º–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∞ 200—Ä/–º–µ—Å\n\n'
        'üõú –ö—É–ø–∏—Ç—å –†–æ—É—Ç–µ—Ä –∏ –∑–∞–±—ã—Ç—å –ø—Ä–æ VPN:\n'
        'https://ozon.ru/product/1902614243\n\n'
        'üí¨ –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ: @seeyoutubefree',
        reply_markup=reply_markup
    )

# –ö–æ–º–∞–Ω–¥–∞ /get_user
async def get_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        username = f"{update.effective_user.username}vpn"
        response = marzban.get_user(username)
        
        if response:
            status = response.get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            expire = response.get("expire", 0)
            expire_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(expire)) if expire else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
            
            info_text = f"–í–∞—à VPN –∞–∫–∫–∞—É–Ω—Ç:\n"
            info_text += f"–õ–æ–≥–∏–Ω: {username}\n"
            info_text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
            info_text += f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {expire_str}\n\n"
            
            if 'subscription_links' in response:
                info_text += "üì± –°—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫—É VPN:\n"
                info_text += f"{response['subscription_links']['subuser_url']}\n\n"
                info_text += "–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:\n\n"
                info_text += "üì± V2rayNG:\n"
                info_text += f"{response['subscription_links']['v2rayng']}\n\n"
                info_text += "üì± Streisand:\n"
                info_text += f"{response['subscription_links']['streisand']}\n\n"
                
            
            await update.message.reply_text(info_text)
        else:
            await request_trial(update, context)
            
    except AttributeError:
        await update.message.reply_text(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

# –ö–æ–º–∞–Ω–¥–∞ /disable_user
async def disable_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        username = context.args[0]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        response = marzban.disable_user(username)  # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if response:
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ—Ç–∫–ª—é—á–µ–Ω.")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /disable_user <username>")

# –ö–æ–º–∞–Ω–¥–∞ /enable_user
async def enable_user(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        username = context.args[0]  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
        response = marzban.enable_user(username)  # –í–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if response:
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –≤–∫–ª—é—á–µ–Ω.")
        else:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /enable_user <username>")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
async def request_trial(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    try:
        username = f"{update.effective_user.username}vpn"
        response = marzban.get_user(username)
        
        if response and isinstance(response, dict):
            expire = response.get("expire", 0)
            current_time = time.time()
            
            if expire and expire < current_time:
                # –ê–∫–∫–∞—É–Ω—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω
                keyboard = [
                    [InlineKeyboardButton("–Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"payment_confirmed_{update.effective_user.username}")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await update.message.reply_text(
                    "‚ö†Ô∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏—Å—Ç–µ–∫!\n\n"
                    "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É:\n"
                    f"üí≥ {response['subscription_links'].get('payment_url', 'URL –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω')}\n\n"
                    "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª'",
                    reply_markup=reply_markup
                )
            else:
                # –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–µ–Ω
                await update.message.reply_text(
                    "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π VPN –∞–∫–∫–∞—É–Ω—Ç.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /get_user –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–º."
                )
        else:
            # –ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º trial
            keyboard = [
                [
                    InlineKeyboardButton("–î–∞", callback_data=f"trial_yes_{update.effective_user.username}"),
                    InlineKeyboardButton("–ù–µ—Ç", callback_data="trial_no"),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π VPN –Ω–∞ 5 –¥–Ω–µ–π?",
                reply_markup=reply_markup
            )
    except AttributeError:
        await update.message.reply_text(
            "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

# –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("payment_confirmed_"):
        username = query.data.split("_")[2]
        current_time = time.strftime('%Y-%m-%d %H:%M:%S')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        await context.bot.send_message(
            chat_id="@AP1int",
            text=f"üí∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –æ–ø–ª–∞—Ç—É\n"
                 f"‚è∞ –í—Ä–µ–º—è: {current_time}"
        )
        
        await query.edit_message_text(
            "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞."
        )
    
    if query.data == "menu_get_user":
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.info(f"Processing menu_get_user for user: {update.effective_user.username}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username
        if not update.effective_user.username:
            await query.edit_message_text(
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —É –≤–∞—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ username –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            return
            
        username = f"{update.effective_user.username}vpn"
        logger.info(f"Attempting to get user info for: {username}")
        
        try:
            response = marzban.get_user(username)
            logger.info(f"Marzban response: {response}")
            
            if response and isinstance(response, dict):
                status = response.get("status", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                expire = response.get("expire", 0)
                expire_str = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(expire)) if expire else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
                
                info_text = f"–í–∞—à VPN –∞–∫–∫–∞—É–Ω—Ç:\n"
                info_text += f"–õ–æ–≥–∏–Ω: {username}\n"
                info_text += f"–°—Ç–∞—Ç—É—Å: {status}\n"
                info_text += f"–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: {expire_str}\n\n"
                
                if 'subscription_links' in response:
                    info_text += "–°—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:\n\n"
                    info_text += "üì± V2rayNG:\n"
                    info_text += f"{response['subscription_links']['v2rayng']}\n\n"
                    info_text += "üì± Streisand:\n"
                    info_text += f"{response['subscription_links']['streisand']}\n\n"
                    info_text += "üì± –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
                    info_text += f"{response['subscription_links']['payment_url']}\n\n"
                
                await query.edit_message_text(info_text)
            else:
                logger.warning(f"User not found or invalid response: {response}")
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º trial
                keyboard = [
                    [
                        InlineKeyboardButton("–î–∞", callback_data=f"trial_yes_{update.effective_user.username}"),
                        InlineKeyboardButton("–ù–µ—Ç", callback_data="trial_no"),
                    ]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await query.edit_message_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç VPN –∞–∫–∫–∞—É–Ω—Ç–∞. –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –¥–æ—Å—Ç—É–ø –Ω–∞ 5 –¥–Ω–µ–π?",
                    reply_markup=reply_markup
                )
        except Exception as e:
            logger.error(f"Error processing menu_get_user: {str(e)}")
            await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif query.data == "menu_get_trial":
        keyboard = [
            [
                InlineKeyboardButton("–î–∞", callback_data=f"trial_yes_{update.effective_user.username}"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data="trial_no"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π VPN –Ω–∞ 5 –¥–Ω–µ–π?",
            reply_markup=reply_markup
        )
        
    elif query.data.startswith("trial_yes_"):
        username = query.data.split("_")[2] + "vpn"
        response = marzban.create_user(username, is_trial=True)
        if response:
            subscription_links = marzban.get_subscription_links(
                username, 
                response.get("subscription_url", "")
            )
            
            reply_text = (
                f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üîë –í–∞—à –ª–æ–≥–∏–Ω: {username}\n\n"
                f"üîó –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π:\n\n"
                f"üì± Android - V2rayNG:\n{subscription_links['v2rayng']}\n\n"
                f"üì± iPhone - Streisand:\n{subscription_links['streisand']}\n\n"
                f"‚ö†Ô∏è –ê–∫–∫–∞—É–Ω—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –¥–Ω–µ–π\n\n"
                f"üí≥ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{subscription_links['payment_url']}\n\n"
                f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫—É VPN:\n{subscription_links['subuser_url']}\n\n"
            )
            
            await query.edit_message_text(reply_text)
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    elif query.data == "trial_no":
        await query.edit_message_text("–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.")

# –û–±–Ω–æ–≤–ª—è–µ–º main() —Å –Ω–æ–≤—ã–º –Ω–∞–±–æ—Ä–æ–º –∫–æ–º–∞–Ω–¥
def main() -> None:
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("get_user", get_user))
    application.add_handler(CommandHandler("get_trial", request_trial))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
    commands = [
        ("start", "–û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        ("get_user", "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º VPN"),
        ("get_trial", "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"),
    ]
    
    # –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    application.bot.set_my_commands(commands)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()